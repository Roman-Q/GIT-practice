1. В командной строке переходим в локальный репозиторий и инициализируем его (папку с файлами, которые нужно запушить "git init") или клонируем репозиторий с сайта "git clone github://path.git"

2. Добавляем файлы для трека (слежение за изменениеми) командой "git add" и перечень файлов или папок которые нужно загрузить (через пробел) или если нужно отслеживать изменения во всех файлах то через "git add ." или "git add <file>" для 1-го файла или убрать определенный файл из трека "git -rm cached <file>". 
Также важно убедиться, что мы находитесь в ветке по умолчанию "git checkout master". Если возникает error: pathspec, ипользовать git checkout -b yourbranchname. Также командой "git status" можно узнать, на какой ветке (branch) репозитория мы находимся, какие изменения присутствуют.

3. Добавляем коммит(сохранение и описание внесенных изменений) командой "git commit -m "release v.1""

4. Получаем доступ к удаленному репозиторию в который хотим запушить файлы командой "git remote add origin https://github.com/path"
и используем команду "git pull origin master --allow-unrelated-histories" для интеграции с репозиторием или локальной веткой. По сути главное решение проблем.

5. Командой "git push -u origin master" пушим необходимые файлы в репозиторий. Если при создании нового репозитория файл readme.md уже был создан, то следует указать "git push -f origin master" (форсированный пуш). Не стоит использовать его если в файле уже имеются записи других участников разработки. Если возникают ошибки стоит попробовать переназначить пользователя и мыло: 
"git config --global user.name "username""
"git config --global user.email user@email.com"
либо переустановить Git. 

6. Если мы клонируем репозиторий с гита, то для нормальной работы следует установить все необходимые зависимости, узнать недостающие можно в package.json > dependencies.

7. При необходимости откатиться к определенному состоянию проекта, следует использовать команду "gitk --all&" (открыть графическую оболочку гита), удалив перед ней файл 'package-lock.json' который будет мешать откату, после чего сделать копию идентификатора нужного коммита (ctrl+ins) и командой "git checkout commitID" (вставить айди коммита shift+ins) переключаемся на определенную ветку состояния. После переключения бранчей состояния важно закоммитить изменения. Если нам нужно отменить новые внесенные изменения следует использовать команду "git status" с помощью который мы узнаем о всех изменениях и пути к измененным файлам, после чего командой "git checkout путь к файлу" можем убрать новые изменения.
